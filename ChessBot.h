#ifndef CHESSBOT_H
#define CHESSBOT_H

#include "./include/chess.hpp"
#include "Polyglot.h"
#include <algorithm>

inline float w_pawnSquareTable[] = {
	0,  0,  0,  0,  0,  0,  0,  0,
	0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50,
	0.10, 0.10, 0.20, 0.30, 0.30, 0.20, 0.10, 0.10,
	0.05,  0.05, 0.10, 0.25, 0.25, 0.10,  0.05,  0.05,
	0,  0,  0, 0.20, 0.20,  0,  0,  0,
	0.05, -0.05,-0.10,  0,  0,-0.10, -0.05,  0.05,
	0.05, 0.10, 0.10,-0.20,-0.20, 0.10, 0.10,  0.05,
	0,  0,  0,  0,  0,  0,  0,  0
};

inline float w_knightSquareTable[] = {
	-0.50,-0.40,-0.30,-0.30,-0.30,-0.30,-0.40,-0.50,
	-0.40,-0.20,  0.0,  0.0,  0.0,  0.0,-0.20,-0.40,
	-0.30,  0.0, 0.10, 0.15, 0.15, 0.10,  0.0,-0.30,
	-0.30,  0.05, 0.15, 0.20, 0.20, 0.15,  0.05,-0.30,
	-0.30,  0.0, 0.15, 0.20, 0.20, 0.15,  0.0,-0.30,
	-0.30,  0.05, 0.10, 0.15, 0.15, 0.10,  0.05,-0.30,
	-0.40,-0.20,  0.0,  0.05,  0.05,  0.0,-0.20,-0.40,
	-0.50,-0.40,-0.30,-0.30,-0.30,-0.30,-0.40,-0.50
};

inline float w_bishopSquareTable[] = {
	-0.20,-0.10,-0.10,-0.10,-0.10,-0.10,-0.10,-0.20,
	-0.10,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,-0.10,
	-0.10,  0.0,  0.05, 0.10, 0.10,  0.05,  0.0,-0.10,
	-0.10,  0.05,  0.05, 0.10, 0.10,  0.05,  0.05,-0.10,
	-0.10,  0.00, 0.10, 0.10, 0.10, 0.10,  0.0,-0.10,
	-0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10,-0.10,
	-0.10,  0.05,  0.0,  0.0, 0.0,  0.0,  0.05,-0.10,
	-0.20,-0.10,-0.10,-0.10,-0.10,-0.10,-0.10,-0.20
};

inline float w_rookSquareTable[] = {
	0,  0,  0,  0,  0,  0,  0,  0,
	0.05, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10,  0.05,
	-0.05,  0,  0,  0,  0,  0,  0, -0.05,
	-0.05,  0,  0,  0,  0,  0,  0, -0.05,
	-0.05,  0,  0,  0,  0,  0,  0, -0.05,
	-0.05,  0,  0,  0,  0,  0,  0, -0.05,
	-0.05,  0,  0,  0,  0,  0,  0, -0.05,
	0,  0,  0,  0.05,  0.05,  0,  0,  0
};

inline float w_queenSquareTable[] = {
	-0.20,-0.10,-0.10, -0.05, -0.05,-0.10,-0.10,-0.20,
	-0.10,  0,  0,  0,  0,  0,  0,-0.10,
	-0.10,  0,  0.05,  0.05,  0.05,  0.05,  0,-0.10,
 	-0.05,  0,  0.05,  0.05,  0.05,  0.05,  0, -0.05,
  	0,  0,  0.05,  0.05,  0.05,  0.05,  0, -0.05,
	-0.10,  0.05,  0.05,  0.05,  0.05,  0.05,  0.0,-0.10,
	-0.10,  0,  0.05,  0,  0,  0,  0,-0.10,
	-0.20,-0.10,-0.10, -0.05, -0.05,-0.10,-0.10,-0.20
};

inline float w_kingMiddleGameSquareTable[] = {
	-0.30,-0.40,-0.40,-0.50,-0.50,-0.40,-0.40,-0.30,
	-0.30,-0.40,-0.40,-0.50,-0.50,-0.40,-0.40,-0.30,
	-0.30,-0.40,-0.40,-0.50,-0.50,-0.40,-0.40,-0.30,
	-0.30,-0.40,-0.40,-0.50,-0.50,-0.40,-0.40,-0.30,
	-0.20,-0.30,-0.30,-0.40,-0.40,-0.30,-0.30,-0.20,
	-0.10,-0.20,-0.20,-0.20,-0.20,-0.20,-0.20,-0.10,
	0.20, 0.20,  0,  0,  0,  0, 0.20, 0.20,
	0.20, 0.30, 0.10,  0,  0, 0.10, 0.30, 0.20
};

inline float w_kingEndGameSquareTable[] = {
	-50,-40,-30,-20,-20,-30,-40,-50,
	-30,-20,-10,  0,  0,-10,-20,-30,
	-30,-10, 20, 30, 30, 20,-10,-30,
	-30,-10, 30, 40, 40, 30,-10,-30,
	-30,-10, 30, 40, 40, 30,-10,-30,
	-30,-10, 20, 30, 30, 20,-10,-30,
	-30,-30,  0,  0,  0,  0,-30,-30,
	-50,-30,-30,-30,-30,-30,-30,-50
};

inline float b_pawnSquareTable[64];
inline float b_knightSquareTable[64];
inline float b_bishopSquareTable[64];
inline float b_rookSquareTable[64];
inline float b_queenSquareTable[64];
inline float b_kingMiddleGameSquareTable[64];
inline float b_kingEndGameSquareTable[64];

class ChessBot {
    public:
        ChessBot();

        float evaluatePosition(chess::Board*);
        float countMaterial(chess::Board*);
        float materialAdjustment(chess::Board*);
		float centerControl(chess::Board*);
		float attackingSquares(chess::Board*);
        float minimax(chess::Board*, int, float, float, bool);

		int piecesLeft(chess::Board*);

		chess::Move getBestMove(chess::Board*, int, bool);

		chess::Movelist orderMoves(chess::Board*);

		void useBook();

		int times;
		
	private:
		PolyGlot book;

		int getPieceValue(chess::PieceType);
		bool usesBook;
};

#endif // CHESSBOT_H